{
  "version": 3,
  "sources": ["../src/filter.ts", "../src/language.ts", "../src/parser.ts", "../src/phonology.ts", "../src/definition.ts"],
  "sourcesContent": [
    "export type filter_desc = [string, string];\nexport const reject_sentinel: string = \"REJECT\";\n\ntype filter_entry = [RegExp, string];\n\nexport class Filter {\n    private readonly filters: filter_entry[] = [];\n\n    constructor(descs: filter_desc[]) {\n        for (const desc of descs) {\n            this.filters.push([new RegExp(desc[0], 'g'), desc[1]]);\n        }\n    }\n\n    transform(input: string): string {\n        for (const entry of this.filters)\n            input = input.replaceAll(entry[0], entry[1]);\n\n        return input;\n    }\n\n    filter(input: string): string | null {\n        for (const entry of this.filters) {\n            input = input.replaceAll(entry[0], entry[1]);\n            if (input.includes(reject_sentinel))\n                return null;\n        }\n\n        return input;\n    }\n};\n\nexport default Filter;\n",
    "import Filter from './filter';\nimport Phonology from './phonology';\n\nexport interface language_settings {\n    modules: string[];\n    settings: Map<string, any>;\n};\n\nexport type word = [string, string];\n\nexport class Language {\n    private readonly settings: language_settings;\n    private readonly phones: Phonology;\n    private readonly ortho: Filter;\n\n    constructor(settings: language_settings, phones: Phonology, ortho: Filter) {\n        this.settings = settings;\n        this.phones = phones;\n        this.ortho = ortho;\n    }\n\n    generate(count: number): word[] {\n        const rand_rate = this.settings.settings.get('random-rate') || 50;\n        let phones = this.phones.generate(count, rand_rate);\n        return phones.map((phone) => [this.ortho.transform(phone), phone]);\n    }\n};\n\nexport default Language;\n",
    "/* AutoGenerated Code, changes may be overwritten\n* INPUT GRAMMAR:\n* ---\n* import type { filter_desc } from './filter';\n* import { reject_sentinel } from './filter';\n* ---\n* start       := lines={statement | comment | eol}+ $\n* statement   := using | settings | pclass | macro | words | reject | filter | spelling\n* using       := 'using:' _modules={ws name=name}+ eol\n*                 .modules = string[] { return _modules.map(s => s.name); }\n* settings    := 'settings:' _settings={ws name=name ws? '=' ws? value=value}+ eol\n*                 .settings = Map<string, any> { return new Map(_settings.map(s => [s.name, s.value.value])); }\n* pclass      := name='[A-Z]' ws? '=' ws? first=phoneme rest={ws phoneme=phoneme}* eol\n*                 .phonemes = string[] { return [this.first, ...rest.map(s => s.phoneme)]; }\n* macro       := name='\\$[A-Z]' ws? '=' ws? value=phoneme eol\n* words       := 'words:' _patterns={ws pattern='[A-Z?\\$]+'}+ eol\n*                 .patterns = string[] { return _patterns.map(s => s.pattern); }\n* reject      := 'reject:' _patterns={ws pattern=phoneme}+ eol\n*                 .patterns = Array<filter_desc> { return _patterns.map(s => [s.pattern, reject_sentinel]); }\n* filter      := 'filter:' ws first=filter_pat rest={ ws? ';' ws? pattern=filter_pat }* ';'? eol\n*                 .patterns = Array<filter_desc> { return [this.first.value, ...this.rest.map(s => s.pattern.value)]; }\n* spelling    := 'spelling:' ws first=filter_pat rest={ ws? ';' ws? pattern=filter_pat }* ';'? eol\n*                 .patterns = Array<filter_desc> { return [this.first.value, ...this.rest.map(s => s.pattern.value)]; }\n* filter_pat  := from=phoneme ws? '>' ws? to=phoneme\n*                 .value = filter_desc { return [this.from, this.to]; }\n* eol         := ws? '\\n'\n* ws          := '[\\t ]+'\n* comment     := {'^#.*'m | ws} eol\n* phoneme     := '[^\\s`:;!]+'\n* value       := num | str\n* name        := '[A-Za-z][A-Za-z0-9_-]*'\n* num         := _value='[0-9]+'\n*                 .value = number { return parseInt(this._value); }\n* str         := '\"' value='[^\"]*' '\"'\n*/\n\nimport type { filter_desc } from './filter';\nimport { reject_sentinel } from './filter';\n\ntype Nullable<T> = T | null;\ntype $$RuleType<T> = () => Nullable<T>;\nexport interface ASTNodeIntf {\n    kind: ASTKinds;\n}\nexport enum ASTKinds {\n    start = \"start\",\n    start_$0_1 = \"start_$0_1\",\n    start_$0_2 = \"start_$0_2\",\n    start_$0_3 = \"start_$0_3\",\n    statement_1 = \"statement_1\",\n    statement_2 = \"statement_2\",\n    statement_3 = \"statement_3\",\n    statement_4 = \"statement_4\",\n    statement_5 = \"statement_5\",\n    statement_6 = \"statement_6\",\n    statement_7 = \"statement_7\",\n    statement_8 = \"statement_8\",\n    using = \"using\",\n    using_$0 = \"using_$0\",\n    settings = \"settings\",\n    settings_$0 = \"settings_$0\",\n    pclass = \"pclass\",\n    pclass_$0 = \"pclass_$0\",\n    macro = \"macro\",\n    words = \"words\",\n    words_$0 = \"words_$0\",\n    reject = \"reject\",\n    reject_$0 = \"reject_$0\",\n    filter = \"filter\",\n    filter_$0 = \"filter_$0\",\n    spelling = \"spelling\",\n    spelling_$0 = \"spelling_$0\",\n    filter_pat = \"filter_pat\",\n    eol = \"eol\",\n    ws = \"ws\",\n    comment = \"comment\",\n    comment_$0_1 = \"comment_$0_1\",\n    comment_$0_2 = \"comment_$0_2\",\n    phoneme = \"phoneme\",\n    value_1 = \"value_1\",\n    value_2 = \"value_2\",\n    name = \"name\",\n    num = \"num\",\n    str = \"str\",\n    $EOF = \"$EOF\",\n}\nexport interface start {\n    kind: ASTKinds.start;\n    lines: [start_$0, ...start_$0[]];\n}\nexport type start_$0 = start_$0_1 | start_$0_2 | start_$0_3;\nexport type start_$0_1 = statement;\nexport type start_$0_2 = comment;\nexport type start_$0_3 = eol;\nexport type statement = statement_1 | statement_2 | statement_3 | statement_4 | statement_5 | statement_6 | statement_7 | statement_8;\nexport type statement_1 = using;\nexport type statement_2 = settings;\nexport type statement_3 = pclass;\nexport type statement_4 = macro;\nexport type statement_5 = words;\nexport type statement_6 = reject;\nexport type statement_7 = filter;\nexport type statement_8 = spelling;\nexport class using {\n    public kind: ASTKinds.using = ASTKinds.using;\n    public _modules: [using_$0, ...using_$0[]];\n    public modules: string[];\n    constructor(_modules: [using_$0, ...using_$0[]]){\n        this._modules = _modules;\n        this.modules = ((): string[] => {\n        return _modules.map(s => s.name);\n        })();\n    }\n}\nexport interface using_$0 {\n    kind: ASTKinds.using_$0;\n    name: name;\n}\nexport class settings {\n    public kind: ASTKinds.settings = ASTKinds.settings;\n    public _settings: [settings_$0, ...settings_$0[]];\n    public settings: Map<string, any>;\n    constructor(_settings: [settings_$0, ...settings_$0[]]){\n        this._settings = _settings;\n        this.settings = ((): Map<string, any> => {\n        return new Map(_settings.map(s => [s.name, s.value.value]));\n        })();\n    }\n}\nexport interface settings_$0 {\n    kind: ASTKinds.settings_$0;\n    name: name;\n    value: value;\n}\nexport class pclass {\n    public kind: ASTKinds.pclass = ASTKinds.pclass;\n    public name: string;\n    public first: phoneme;\n    public rest: pclass_$0[];\n    public phonemes: string[];\n    constructor(name: string, first: phoneme, rest: pclass_$0[]){\n        this.name = name;\n        this.first = first;\n        this.rest = rest;\n        this.phonemes = ((): string[] => {\n        return [this.first, ...rest.map(s => s.phoneme)];\n        })();\n    }\n}\nexport interface pclass_$0 {\n    kind: ASTKinds.pclass_$0;\n    phoneme: phoneme;\n}\nexport interface macro {\n    kind: ASTKinds.macro;\n    name: string;\n    value: phoneme;\n}\nexport class words {\n    public kind: ASTKinds.words = ASTKinds.words;\n    public _patterns: [words_$0, ...words_$0[]];\n    public patterns: string[];\n    constructor(_patterns: [words_$0, ...words_$0[]]){\n        this._patterns = _patterns;\n        this.patterns = ((): string[] => {\n        return _patterns.map(s => s.pattern);\n        })();\n    }\n}\nexport interface words_$0 {\n    kind: ASTKinds.words_$0;\n    pattern: string;\n}\nexport class reject {\n    public kind: ASTKinds.reject = ASTKinds.reject;\n    public _patterns: [reject_$0, ...reject_$0[]];\n    public patterns: Array<filter_desc>;\n    constructor(_patterns: [reject_$0, ...reject_$0[]]){\n        this._patterns = _patterns;\n        this.patterns = ((): Array<filter_desc> => {\n        return _patterns.map(s => [s.pattern, reject_sentinel]);\n        })();\n    }\n}\nexport interface reject_$0 {\n    kind: ASTKinds.reject_$0;\n    pattern: phoneme;\n}\nexport class filter {\n    public kind: ASTKinds.filter = ASTKinds.filter;\n    public first: filter_pat;\n    public rest: filter_$0[];\n    public patterns: Array<filter_desc>;\n    constructor(first: filter_pat, rest: filter_$0[]){\n        this.first = first;\n        this.rest = rest;\n        this.patterns = ((): Array<filter_desc> => {\n        return [this.first.value, ...this.rest.map(s => s.pattern.value)];\n        })();\n    }\n}\nexport interface filter_$0 {\n    kind: ASTKinds.filter_$0;\n    pattern: filter_pat;\n}\nexport class spelling {\n    public kind: ASTKinds.spelling = ASTKinds.spelling;\n    public first: filter_pat;\n    public rest: spelling_$0[];\n    public patterns: Array<filter_desc>;\n    constructor(first: filter_pat, rest: spelling_$0[]){\n        this.first = first;\n        this.rest = rest;\n        this.patterns = ((): Array<filter_desc> => {\n        return [this.first.value, ...this.rest.map(s => s.pattern.value)];\n        })();\n    }\n}\nexport interface spelling_$0 {\n    kind: ASTKinds.spelling_$0;\n    pattern: filter_pat;\n}\nexport class filter_pat {\n    public kind: ASTKinds.filter_pat = ASTKinds.filter_pat;\n    public from: phoneme;\n    public to: phoneme;\n    public value: filter_desc;\n    constructor(from: phoneme, to: phoneme){\n        this.from = from;\n        this.to = to;\n        this.value = ((): filter_desc => {\n        return [this.from, this.to];\n        })();\n    }\n}\nexport interface eol {\n    kind: ASTKinds.eol;\n}\nexport type ws = string;\nexport interface comment {\n    kind: ASTKinds.comment;\n}\nexport type comment_$0 = comment_$0_1 | comment_$0_2;\nexport type comment_$0_1 = string;\nexport type comment_$0_2 = ws;\nexport type phoneme = string;\nexport type value = value_1 | value_2;\nexport type value_1 = num;\nexport type value_2 = str;\nexport type name = string;\nexport class num {\n    public kind: ASTKinds.num = ASTKinds.num;\n    public _value: string;\n    public value: number;\n    constructor(_value: string){\n        this._value = _value;\n        this.value = ((): number => {\n        return parseInt(this._value);\n        })();\n    }\n}\nexport interface str {\n    kind: ASTKinds.str;\n    value: string;\n}\nexport class Parser {\n    private readonly input: string;\n    private pos: PosInfo;\n    private negating: boolean = false;\n    private memoSafe: boolean = true;\n    constructor(input: string) {\n        this.pos = {overallPos: 0, line: 1, offset: 0};\n        this.input = input;\n    }\n    public reset(pos: PosInfo) {\n        this.pos = pos;\n    }\n    public finished(): boolean {\n        return this.pos.overallPos === this.input.length;\n    }\n    public clearMemos(): void {\n    }\n    public matchstart($$dpth: number, $$cr?: ErrorTracker): Nullable<start> {\n        return this.run<start>($$dpth,\n            () => {\n                let $scope$lines: Nullable<[start_$0, ...start_$0[]]>;\n                let $$res: Nullable<start> = null;\n                if (true\n                    && ($scope$lines = this.loopPlus<start_$0>(() => this.matchstart_$0($$dpth + 1, $$cr))) !== null\n                    && this.match$EOF($$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.start, lines: $scope$lines};\n                }\n                return $$res;\n            });\n    }\n    public matchstart_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<start_$0> {\n        return this.choice<start_$0>([\n            () => this.matchstart_$0_1($$dpth + 1, $$cr),\n            () => this.matchstart_$0_2($$dpth + 1, $$cr),\n            () => this.matchstart_$0_3($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchstart_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<start_$0_1> {\n        return this.matchstatement($$dpth + 1, $$cr);\n    }\n    public matchstart_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<start_$0_2> {\n        return this.matchcomment($$dpth + 1, $$cr);\n    }\n    public matchstart_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<start_$0_3> {\n        return this.matcheol($$dpth + 1, $$cr);\n    }\n    public matchstatement($$dpth: number, $$cr?: ErrorTracker): Nullable<statement> {\n        return this.choice<statement>([\n            () => this.matchstatement_1($$dpth + 1, $$cr),\n            () => this.matchstatement_2($$dpth + 1, $$cr),\n            () => this.matchstatement_3($$dpth + 1, $$cr),\n            () => this.matchstatement_4($$dpth + 1, $$cr),\n            () => this.matchstatement_5($$dpth + 1, $$cr),\n            () => this.matchstatement_6($$dpth + 1, $$cr),\n            () => this.matchstatement_7($$dpth + 1, $$cr),\n            () => this.matchstatement_8($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchstatement_1($$dpth: number, $$cr?: ErrorTracker): Nullable<statement_1> {\n        return this.matchusing($$dpth + 1, $$cr);\n    }\n    public matchstatement_2($$dpth: number, $$cr?: ErrorTracker): Nullable<statement_2> {\n        return this.matchsettings($$dpth + 1, $$cr);\n    }\n    public matchstatement_3($$dpth: number, $$cr?: ErrorTracker): Nullable<statement_3> {\n        return this.matchpclass($$dpth + 1, $$cr);\n    }\n    public matchstatement_4($$dpth: number, $$cr?: ErrorTracker): Nullable<statement_4> {\n        return this.matchmacro($$dpth + 1, $$cr);\n    }\n    public matchstatement_5($$dpth: number, $$cr?: ErrorTracker): Nullable<statement_5> {\n        return this.matchwords($$dpth + 1, $$cr);\n    }\n    public matchstatement_6($$dpth: number, $$cr?: ErrorTracker): Nullable<statement_6> {\n        return this.matchreject($$dpth + 1, $$cr);\n    }\n    public matchstatement_7($$dpth: number, $$cr?: ErrorTracker): Nullable<statement_7> {\n        return this.matchfilter($$dpth + 1, $$cr);\n    }\n    public matchstatement_8($$dpth: number, $$cr?: ErrorTracker): Nullable<statement_8> {\n        return this.matchspelling($$dpth + 1, $$cr);\n    }\n    public matchusing($$dpth: number, $$cr?: ErrorTracker): Nullable<using> {\n        return this.run<using>($$dpth,\n            () => {\n                let $scope$_modules: Nullable<[using_$0, ...using_$0[]]>;\n                let $$res: Nullable<using> = null;\n                if (true\n                    && this.regexAccept(String.raw`(?:using:)`, \"\", $$dpth + 1, $$cr) !== null\n                    && ($scope$_modules = this.loopPlus<using_$0>(() => this.matchusing_$0($$dpth + 1, $$cr))) !== null\n                    && this.matcheol($$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = new using($scope$_modules);\n                }\n                return $$res;\n            });\n    }\n    public matchusing_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<using_$0> {\n        return this.run<using_$0>($$dpth,\n            () => {\n                let $scope$name: Nullable<name>;\n                let $$res: Nullable<using_$0> = null;\n                if (true\n                    && this.matchws($$dpth + 1, $$cr) !== null\n                    && ($scope$name = this.matchname($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.using_$0, name: $scope$name};\n                }\n                return $$res;\n            });\n    }\n    public matchsettings($$dpth: number, $$cr?: ErrorTracker): Nullable<settings> {\n        return this.run<settings>($$dpth,\n            () => {\n                let $scope$_settings: Nullable<[settings_$0, ...settings_$0[]]>;\n                let $$res: Nullable<settings> = null;\n                if (true\n                    && this.regexAccept(String.raw`(?:settings:)`, \"\", $$dpth + 1, $$cr) !== null\n                    && ($scope$_settings = this.loopPlus<settings_$0>(() => this.matchsettings_$0($$dpth + 1, $$cr))) !== null\n                    && this.matcheol($$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = new settings($scope$_settings);\n                }\n                return $$res;\n            });\n    }\n    public matchsettings_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<settings_$0> {\n        return this.run<settings_$0>($$dpth,\n            () => {\n                let $scope$name: Nullable<name>;\n                let $scope$value: Nullable<value>;\n                let $$res: Nullable<settings_$0> = null;\n                if (true\n                    && this.matchws($$dpth + 1, $$cr) !== null\n                    && ($scope$name = this.matchname($$dpth + 1, $$cr)) !== null\n                    && ((this.matchws($$dpth + 1, $$cr)) || true)\n                    && this.regexAccept(String.raw`(?:=)`, \"\", $$dpth + 1, $$cr) !== null\n                    && ((this.matchws($$dpth + 1, $$cr)) || true)\n                    && ($scope$value = this.matchvalue($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.settings_$0, name: $scope$name, value: $scope$value};\n                }\n                return $$res;\n            });\n    }\n    public matchpclass($$dpth: number, $$cr?: ErrorTracker): Nullable<pclass> {\n        return this.run<pclass>($$dpth,\n            () => {\n                let $scope$name: Nullable<string>;\n                let $scope$first: Nullable<phoneme>;\n                let $scope$rest: Nullable<pclass_$0[]>;\n                let $$res: Nullable<pclass> = null;\n                if (true\n                    && ($scope$name = this.regexAccept(String.raw`(?:[A-Z])`, \"\", $$dpth + 1, $$cr)) !== null\n                    && ((this.matchws($$dpth + 1, $$cr)) || true)\n                    && this.regexAccept(String.raw`(?:=)`, \"\", $$dpth + 1, $$cr) !== null\n                    && ((this.matchws($$dpth + 1, $$cr)) || true)\n                    && ($scope$first = this.matchphoneme($$dpth + 1, $$cr)) !== null\n                    && ($scope$rest = this.loop<pclass_$0>(() => this.matchpclass_$0($$dpth + 1, $$cr), 0, -1)) !== null\n                    && this.matcheol($$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = new pclass($scope$name, $scope$first, $scope$rest);\n                }\n                return $$res;\n            });\n    }\n    public matchpclass_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<pclass_$0> {\n        return this.run<pclass_$0>($$dpth,\n            () => {\n                let $scope$phoneme: Nullable<phoneme>;\n                let $$res: Nullable<pclass_$0> = null;\n                if (true\n                    && this.matchws($$dpth + 1, $$cr) !== null\n                    && ($scope$phoneme = this.matchphoneme($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.pclass_$0, phoneme: $scope$phoneme};\n                }\n                return $$res;\n            });\n    }\n    public matchmacro($$dpth: number, $$cr?: ErrorTracker): Nullable<macro> {\n        return this.run<macro>($$dpth,\n            () => {\n                let $scope$name: Nullable<string>;\n                let $scope$value: Nullable<phoneme>;\n                let $$res: Nullable<macro> = null;\n                if (true\n                    && ($scope$name = this.regexAccept(String.raw`(?:\\$[A-Z])`, \"\", $$dpth + 1, $$cr)) !== null\n                    && ((this.matchws($$dpth + 1, $$cr)) || true)\n                    && this.regexAccept(String.raw`(?:=)`, \"\", $$dpth + 1, $$cr) !== null\n                    && ((this.matchws($$dpth + 1, $$cr)) || true)\n                    && ($scope$value = this.matchphoneme($$dpth + 1, $$cr)) !== null\n                    && this.matcheol($$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.macro, name: $scope$name, value: $scope$value};\n                }\n                return $$res;\n            });\n    }\n    public matchwords($$dpth: number, $$cr?: ErrorTracker): Nullable<words> {\n        return this.run<words>($$dpth,\n            () => {\n                let $scope$_patterns: Nullable<[words_$0, ...words_$0[]]>;\n                let $$res: Nullable<words> = null;\n                if (true\n                    && this.regexAccept(String.raw`(?:words:)`, \"\", $$dpth + 1, $$cr) !== null\n                    && ($scope$_patterns = this.loopPlus<words_$0>(() => this.matchwords_$0($$dpth + 1, $$cr))) !== null\n                    && this.matcheol($$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = new words($scope$_patterns);\n                }\n                return $$res;\n            });\n    }\n    public matchwords_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<words_$0> {\n        return this.run<words_$0>($$dpth,\n            () => {\n                let $scope$pattern: Nullable<string>;\n                let $$res: Nullable<words_$0> = null;\n                if (true\n                    && this.matchws($$dpth + 1, $$cr) !== null\n                    && ($scope$pattern = this.regexAccept(String.raw`(?:[A-Z?\\$]+)`, \"\", $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.words_$0, pattern: $scope$pattern};\n                }\n                return $$res;\n            });\n    }\n    public matchreject($$dpth: number, $$cr?: ErrorTracker): Nullable<reject> {\n        return this.run<reject>($$dpth,\n            () => {\n                let $scope$_patterns: Nullable<[reject_$0, ...reject_$0[]]>;\n                let $$res: Nullable<reject> = null;\n                if (true\n                    && this.regexAccept(String.raw`(?:reject:)`, \"\", $$dpth + 1, $$cr) !== null\n                    && ($scope$_patterns = this.loopPlus<reject_$0>(() => this.matchreject_$0($$dpth + 1, $$cr))) !== null\n                    && this.matcheol($$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = new reject($scope$_patterns);\n                }\n                return $$res;\n            });\n    }\n    public matchreject_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<reject_$0> {\n        return this.run<reject_$0>($$dpth,\n            () => {\n                let $scope$pattern: Nullable<phoneme>;\n                let $$res: Nullable<reject_$0> = null;\n                if (true\n                    && this.matchws($$dpth + 1, $$cr) !== null\n                    && ($scope$pattern = this.matchphoneme($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.reject_$0, pattern: $scope$pattern};\n                }\n                return $$res;\n            });\n    }\n    public matchfilter($$dpth: number, $$cr?: ErrorTracker): Nullable<filter> {\n        return this.run<filter>($$dpth,\n            () => {\n                let $scope$first: Nullable<filter_pat>;\n                let $scope$rest: Nullable<filter_$0[]>;\n                let $$res: Nullable<filter> = null;\n                if (true\n                    && this.regexAccept(String.raw`(?:filter:)`, \"\", $$dpth + 1, $$cr) !== null\n                    && this.matchws($$dpth + 1, $$cr) !== null\n                    && ($scope$first = this.matchfilter_pat($$dpth + 1, $$cr)) !== null\n                    && ($scope$rest = this.loop<filter_$0>(() => this.matchfilter_$0($$dpth + 1, $$cr), 0, -1)) !== null\n                    && ((this.regexAccept(String.raw`(?:;)`, \"\", $$dpth + 1, $$cr)) || true)\n                    && this.matcheol($$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = new filter($scope$first, $scope$rest);\n                }\n                return $$res;\n            });\n    }\n    public matchfilter_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<filter_$0> {\n        return this.run<filter_$0>($$dpth,\n            () => {\n                let $scope$pattern: Nullable<filter_pat>;\n                let $$res: Nullable<filter_$0> = null;\n                if (true\n                    && ((this.matchws($$dpth + 1, $$cr)) || true)\n                    && this.regexAccept(String.raw`(?:;)`, \"\", $$dpth + 1, $$cr) !== null\n                    && ((this.matchws($$dpth + 1, $$cr)) || true)\n                    && ($scope$pattern = this.matchfilter_pat($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.filter_$0, pattern: $scope$pattern};\n                }\n                return $$res;\n            });\n    }\n    public matchspelling($$dpth: number, $$cr?: ErrorTracker): Nullable<spelling> {\n        return this.run<spelling>($$dpth,\n            () => {\n                let $scope$first: Nullable<filter_pat>;\n                let $scope$rest: Nullable<spelling_$0[]>;\n                let $$res: Nullable<spelling> = null;\n                if (true\n                    && this.regexAccept(String.raw`(?:spelling:)`, \"\", $$dpth + 1, $$cr) !== null\n                    && this.matchws($$dpth + 1, $$cr) !== null\n                    && ($scope$first = this.matchfilter_pat($$dpth + 1, $$cr)) !== null\n                    && ($scope$rest = this.loop<spelling_$0>(() => this.matchspelling_$0($$dpth + 1, $$cr), 0, -1)) !== null\n                    && ((this.regexAccept(String.raw`(?:;)`, \"\", $$dpth + 1, $$cr)) || true)\n                    && this.matcheol($$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = new spelling($scope$first, $scope$rest);\n                }\n                return $$res;\n            });\n    }\n    public matchspelling_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<spelling_$0> {\n        return this.run<spelling_$0>($$dpth,\n            () => {\n                let $scope$pattern: Nullable<filter_pat>;\n                let $$res: Nullable<spelling_$0> = null;\n                if (true\n                    && ((this.matchws($$dpth + 1, $$cr)) || true)\n                    && this.regexAccept(String.raw`(?:;)`, \"\", $$dpth + 1, $$cr) !== null\n                    && ((this.matchws($$dpth + 1, $$cr)) || true)\n                    && ($scope$pattern = this.matchfilter_pat($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.spelling_$0, pattern: $scope$pattern};\n                }\n                return $$res;\n            });\n    }\n    public matchfilter_pat($$dpth: number, $$cr?: ErrorTracker): Nullable<filter_pat> {\n        return this.run<filter_pat>($$dpth,\n            () => {\n                let $scope$from: Nullable<phoneme>;\n                let $scope$to: Nullable<phoneme>;\n                let $$res: Nullable<filter_pat> = null;\n                if (true\n                    && ($scope$from = this.matchphoneme($$dpth + 1, $$cr)) !== null\n                    && ((this.matchws($$dpth + 1, $$cr)) || true)\n                    && this.regexAccept(String.raw`(?:>)`, \"\", $$dpth + 1, $$cr) !== null\n                    && ((this.matchws($$dpth + 1, $$cr)) || true)\n                    && ($scope$to = this.matchphoneme($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = new filter_pat($scope$from, $scope$to);\n                }\n                return $$res;\n            });\n    }\n    public matcheol($$dpth: number, $$cr?: ErrorTracker): Nullable<eol> {\n        return this.run<eol>($$dpth,\n            () => {\n                let $$res: Nullable<eol> = null;\n                if (true\n                    && ((this.matchws($$dpth + 1, $$cr)) || true)\n                    && this.regexAccept(String.raw`(?:\\n)`, \"\", $$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.eol, };\n                }\n                return $$res;\n            });\n    }\n    public matchws($$dpth: number, $$cr?: ErrorTracker): Nullable<ws> {\n        return this.regexAccept(String.raw`(?:[\\t ]+)`, \"\", $$dpth + 1, $$cr);\n    }\n    public matchcomment($$dpth: number, $$cr?: ErrorTracker): Nullable<comment> {\n        return this.run<comment>($$dpth,\n            () => {\n                let $$res: Nullable<comment> = null;\n                if (true\n                    && this.matchcomment_$0($$dpth + 1, $$cr) !== null\n                    && this.matcheol($$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.comment, };\n                }\n                return $$res;\n            });\n    }\n    public matchcomment_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<comment_$0> {\n        return this.choice<comment_$0>([\n            () => this.matchcomment_$0_1($$dpth + 1, $$cr),\n            () => this.matchcomment_$0_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchcomment_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comment_$0_1> {\n        return this.regexAccept(String.raw`(?:^#.*)`, \"m\", $$dpth + 1, $$cr);\n    }\n    public matchcomment_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comment_$0_2> {\n        return this.matchws($$dpth + 1, $$cr);\n    }\n    public matchphoneme($$dpth: number, $$cr?: ErrorTracker): Nullable<phoneme> {\n        return this.regexAccept(String.raw`(?:[^\\s\\`:;!]+)`, \"\", $$dpth + 1, $$cr);\n    }\n    public matchvalue($$dpth: number, $$cr?: ErrorTracker): Nullable<value> {\n        return this.choice<value>([\n            () => this.matchvalue_1($$dpth + 1, $$cr),\n            () => this.matchvalue_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchvalue_1($$dpth: number, $$cr?: ErrorTracker): Nullable<value_1> {\n        return this.matchnum($$dpth + 1, $$cr);\n    }\n    public matchvalue_2($$dpth: number, $$cr?: ErrorTracker): Nullable<value_2> {\n        return this.matchstr($$dpth + 1, $$cr);\n    }\n    public matchname($$dpth: number, $$cr?: ErrorTracker): Nullable<name> {\n        return this.regexAccept(String.raw`(?:[A-Za-z][A-Za-z0-9_-]*)`, \"\", $$dpth + 1, $$cr);\n    }\n    public matchnum($$dpth: number, $$cr?: ErrorTracker): Nullable<num> {\n        return this.run<num>($$dpth,\n            () => {\n                let $scope$_value: Nullable<string>;\n                let $$res: Nullable<num> = null;\n                if (true\n                    && ($scope$_value = this.regexAccept(String.raw`(?:[0-9]+)`, \"\", $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = new num($scope$_value);\n                }\n                return $$res;\n            });\n    }\n    public matchstr($$dpth: number, $$cr?: ErrorTracker): Nullable<str> {\n        return this.run<str>($$dpth,\n            () => {\n                let $scope$value: Nullable<string>;\n                let $$res: Nullable<str> = null;\n                if (true\n                    && this.regexAccept(String.raw`(?:\")`, \"\", $$dpth + 1, $$cr) !== null\n                    && ($scope$value = this.regexAccept(String.raw`(?:[^\"]*)`, \"\", $$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:\")`, \"\", $$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.str, value: $scope$value};\n                }\n                return $$res;\n            });\n    }\n    public test(): boolean {\n        const mrk = this.mark();\n        const res = this.matchstart(0);\n        const ans = res !== null;\n        this.reset(mrk);\n        return ans;\n    }\n    public parse(): ParseResult {\n        const mrk = this.mark();\n        const res = this.matchstart(0);\n        if (res)\n            return {ast: res, errs: []};\n        this.reset(mrk);\n        const rec = new ErrorTracker();\n        this.clearMemos();\n        this.matchstart(0, rec);\n        const err = rec.getErr()\n        return {ast: res, errs: err !== null ? [err] : []}\n    }\n    public mark(): PosInfo {\n        return this.pos;\n    }\n    // @ts-ignore: loopPlus may not be called\n    private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {\n        return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;\n    }\n    private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {\n        const mrk = this.mark();\n        const res: T[] = [];\n        while (ub === -1 || res.length < ub) {\n            const preMrk = this.mark();\n            const t = func();\n            if (t === null || this.pos.overallPos === preMrk.overallPos) {\n                break;\n            }\n            res.push(t);\n        }\n        if (res.length >= lb) {\n            return res;\n        }\n        this.reset(mrk);\n        return null;\n    }\n    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {\n        const mrk = this.mark();\n        const res = fn()\n        if (res !== null)\n            return res;\n        this.reset(mrk);\n        return null;\n    }\n    // @ts-ignore: choice may not be called\n    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {\n        for (const f of fns) {\n            const res = f();\n            if (res !== null) {\n                return res;\n            }\n        }\n        return null;\n    }\n    private regexAccept(match: string, mods: string, dpth: number, cr?: ErrorTracker): Nullable<string> {\n        return this.run<string>(dpth,\n            () => {\n                const reg = new RegExp(match, \"y\" + mods);\n                const mrk = this.mark();\n                reg.lastIndex = mrk.overallPos;\n                const res = this.tryConsume(reg);\n                if(cr) {\n                    cr.record(mrk, res, {\n                        kind: \"RegexMatch\",\n                        // We substring from 3 to len - 1 to strip off the\n                        // non-capture group syntax added as a WebKit workaround\n                        literal: match.substring(3, match.length - 1),\n                        negated: this.negating,\n                    });\n                }\n                return res;\n            });\n    }\n    private tryConsume(reg: RegExp): Nullable<string> {\n        const res = reg.exec(this.input);\n        if (res) {\n            let lineJmp = 0;\n            let lind = -1;\n            for (let i = 0; i < res[0].length; ++i) {\n                if (res[0][i] === \"\\n\") {\n                    ++lineJmp;\n                    lind = i;\n                }\n            }\n            this.pos = {\n                overallPos: reg.lastIndex,\n                line: this.pos.line + lineJmp,\n                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)\n            };\n            return res[0];\n        }\n        return null;\n    }\n    // @ts-ignore: noConsume may not be called\n    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {\n        const mrk = this.mark();\n        const res = fn();\n        this.reset(mrk);\n        return res;\n    }\n    // @ts-ignore: negate may not be called\n    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {\n        const mrk = this.mark();\n        const oneg = this.negating;\n        this.negating = !oneg;\n        const res = fn();\n        this.negating = oneg;\n        this.reset(mrk);\n        return res === null ? true : null;\n    }\n    // @ts-ignore: Memoise may not be used\n    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {\n        const $scope$pos = this.mark();\n        const $scope$memoRes = memo.get($scope$pos.overallPos);\n        if(this.memoSafe && $scope$memoRes !== undefined) {\n        this.reset($scope$memoRes[1]);\n        return $scope$memoRes[0];\n        }\n        const $scope$result = rule();\n        if(this.memoSafe)\n        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);\n        return $scope$result;\n    }\n    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {\n        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;\n        if(et)\n            et.record(this.mark(), res, { kind: \"EOF\", negated: this.negating });\n        return res;\n    }\n}\nexport function parse(s: string): ParseResult {\n    const p = new Parser(s);\n    return p.parse();\n}\nexport interface ParseResult {\n    ast: Nullable<start>;\n    errs: SyntaxErr[];\n}\nexport interface PosInfo {\n    readonly overallPos: number;\n    readonly line: number;\n    readonly offset: number;\n}\nexport interface RegexMatch {\n    readonly kind: \"RegexMatch\";\n    readonly negated: boolean;\n    readonly literal: string;\n}\nexport type EOFMatch = { kind: \"EOF\"; negated: boolean };\nexport type MatchAttempt = RegexMatch | EOFMatch;\nexport class SyntaxErr {\n    public pos: PosInfo;\n    public expmatches: MatchAttempt[];\n    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {\n        this.pos = pos;\n        this.expmatches = [...expmatches];\n    }\n    public toString(): string {\n        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === \"EOF\" ? \" EOF\" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;\n    }\n}\nclass ErrorTracker {\n    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};\n    private regexset: Set<string> = new Set();\n    private pmatches: MatchAttempt[] = [];\n    public record(pos: PosInfo, result: any, att: MatchAttempt) {\n        if ((result === null) === att.negated)\n            return;\n        if (pos.overallPos > this.mxpos.overallPos) {\n            this.mxpos = pos;\n            this.pmatches = [];\n            this.regexset.clear()\n        }\n        if (this.mxpos.overallPos === pos.overallPos) {\n            if(att.kind === \"RegexMatch\") {\n                if(!this.regexset.has(att.literal))\n                    this.pmatches.push(att);\n                this.regexset.add(att.literal);\n            } else {\n                this.pmatches.push(att);\n            }\n        }\n    }\n    public getErr(): SyntaxErr | null {\n        if (this.mxpos.overallPos !== -1)\n            return new SyntaxErr(this.mxpos, this.pmatches);\n        return null;\n    }\n}",
    "import Filter from './filter';\nimport type { filter_desc } from './filter';\n\nclass RejectError extends Error {};\n\nclass WeightedRandom {\n    private readonly phonemes: string[];\n    private readonly weights: number[];\n    private readonly total: number;\n\n    constructor(phonemes: string[]) {\n        this.phonemes = phonemes;\n        const base = Math.log(phonemes.length + 1);\n\n        this.weights = [];\n        for (let i = 0; i < phonemes.length; i++) {\n            this.weights.push(base - Math.log(i+1));\n        }\n\n        this.total = this.weights.reduce((x, y) => x + y, 0);\n    }\n\n    choose(): string {\n        const roll = Math.random() * this.total;\n        let accumulator = 0;\n        for (let i = 0; i < this.phonemes.length; i++) {\n            accumulator += this.weights[i];\n            if (accumulator > roll)\n                return this.phonemes[i];\n        }\n\n        // Should never get here, return the most common item.\n        return this.phonemes[0];\n    }\n};\n\nclass PhoneMap extends Map<string, WeightedRandom> {\n    replace(input: string, rand_rate: number): string {\n        let self = this;\n\n        function replacer(match, className, questionMark, offset, str) {\n            if (questionMark && (Math.random() * 100) > rand_rate)\n                return \"\";\n            \n            let choices = self.get(className);\n            return self.replace(choices.choose());\n        }\n        return input.replaceAll(/([A-Z])(\\?)?/g, replacer);\n    }\n}\n\nexport class Phonology extends Filter {\n    private readonly patterns: WeightedRandom;\n    private readonly classes: PhoneMap;\n\n    constructor(patterns: string[], classes: Map<string, string[]>, filters: filter_desc[]) {\n        super(filters);\n        this.patterns = new WeightedRandom(patterns);\n\n        this.classes = new PhoneMap();\n        for (const [name, phones] of classes)\n            this.classes.set(name, new WeightedRandom(phones));\n    }\n\n    generate(count: number, rand_rate: number): string[] {\n        return Array\n            .from({length: count}, () => {\n                let result = this.classes.replace(this.patterns.choose(), rand_rate);\n                return this.filter(result);\n\n                const form = this.patterns.choose()\n                    .split(/([A-Z]\\??)/)\n                    .filter(s => {\n                        if (s.endsWith('?'))\n                            return (Math.random() * 100) <= rand_rate;\n                        return !!s;\n                    })\n                    .map(s => {\n                        const pclass = s.substring(0,1);\n                        const ph = this.classes.get(pclass);\n                        if (!ph) {\n                            const all = [...this.classes.keys()].map(k => `'${k}'`).join(', ');\n                            throw new Error(`Unknown phoneme class '${pclass}' in ${all}`);\n                        }\n                        return ph.choose();\n                    })\n                    .join(\"\");\n\n                return form;\n            })\n            .filter((s): s is \"string\" => (typeof s === \"string\"));\n    }\n};\n\nexport default Phonology;\n",
    "import type { filter_desc } from './filter';\nimport type { language_settings } from './language';\n\nimport Filter from './filter';\nimport Language from './language';\nimport { parse, ASTKinds } from './parser';\nimport Phonology from './phonology';\n\n\nexport function build_language(definition: string): Language {\n    const result = parse(definition);\n    if (!result.ast) {\n        const error = new Error(result.errs.toString());\n        throw error;\n    }\n\n    let settings_vars: Map<string, any> = new Map();\n    let using_modules: string[][] = [];\n\n    let word_patterns: string[][] = [];\n    let filter_patterns: filter_desc[] = [];\n    let classes: Map<string, string[]> = new Map();\n\n    let macros: filter_desc[] = [];\n    let spelling: filter_desc[] = [];\n\n    for (const line of result.ast.lines) {\n        switch (line.kind) {\n        case ASTKinds.using:\n            using_modules.push(line.modules);\n            break;\n\n        case ASTKinds.settings:\n            for (const key of line.settings.keys())\n                settings_vars.set(key, line.settings.get(key));\n            break;\n\n        case ASTKinds.pclass:\n            classes.set(line.name, line.phonemes);\n            break;\n\n        case ASTKinds.macro:\n            macros.push(['\\\\' + line.name, line.value]);\n            break;\n\n        case ASTKinds.words:\n            word_patterns.push(line.patterns);\n            break;\n\n        case ASTKinds.reject:\n        case ASTKinds.filter:\n            for(const pattern of line.patterns)\n                filter_patterns.push(pattern);\n            break;\n\n        case ASTKinds.spelling:\n            for(const pattern of line.patterns)\n                spelling.push(pattern);\n            break;\n        }\n    }\n\n    let macro_filter: Filter = new Filter(macros);\n\n    let final_patterns = word_patterns\n        .flat()\n        .map(p => macro_filter.transform(p));\n\n    return new Language(\n        {modules: using_modules.flat(), settings: settings_vars},\n        new Phonology(final_patterns, classes, filter_patterns),\n        new Filter(spelling),\n    );\n}\n\nexport default build_language;\n"
  ],
  "mappings": "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",
  "debugId": "D972C38CFD90765264756E2164756E21",
  "names": []
}